# -*- coding: utf-8 -*-
"""Wheat (1).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MyDBWVt52-OvlLeWmOTnK7rSgSup658b
"""

from google.colab import drive
drive.mount('/content/drive')

pip install ultralytics

from ultralytics import YOLO

model = YOLO("yolov8n.pt")

model.train(data='/content/drive/MyDrive/wheat dataset new.v1i.yolov8 (1)/data.yaml',epochs=100)

import os
from ultralytics import YOLO
from google.colab.patches import cv2_imshow

IMAGES_DIR = '/content/drive/MyDrive/wheat dataset new.v1i.yolov8 (1)/test/images'

image_path = '/content/drive/MyDrive/wheat dataset new.v1i.yolov8 (1)/test/images/IMG_20231206_135258_jpg.rf.03708e2bc117a350ba4ee8f49c9dc8ad.jpg'
output_image_path = '{}_out.jpg'.format(os.path.splitext(image_path)[0])

# Load a model
model_path = os.path.join('.', 'runs', 'detect', 'train', 'weights', 'last.pt')
model = YOLO(model_path)

image = cv2.imread(image_path)
H, W, _ = image.shape

# Run the model on the input image
results = model(image)[0]

threshold = 0.5

# User-provided total number of objects
user_total_objects = 25 # Replace with the actual total number of objects

# Count the number of correct detections
correct_detections = 0
total_detections = 0

for result in results.boxes.data.tolist():
    x1, y1, x2, y2, score, class_id = result
    if score > threshold:
        total_detections += 1
        predicted_label = results.names[int(class_id)].upper()

        # Uncomment the following line if you want to display bounding boxes for all detected objects
        # label = predicted_label[0]  # Get the first letter of the predicted label

        # Uncomment the following lines if you want to display bounding boxes only for 'WHEAT' objects
        label = ''  # Display 'W' for 'WHEAT'
        if predicted_label == 'WHEAT':
            correct_detections += 1

        cv2.rectangle(image, (int(x1), int(y1)), (int(x2), int(y2)), (0, 255, 0), 4)
        cv2.putText(image, label, (int(x1), int(y1 - 10)),
                    cv2.FONT_HERSHEY_SIMPLEX, 1.3, (0, 255, 0), 3, cv2.LINE_AA)

# Display or save the output image
cv2.imwrite(output_image_path, image)
cv2_imshow(image)  # Display the output image

# Print the total number of detections
print('Total Detections:', total_detections)

# Calculate accuracy based on user-provided total number of objects
accuracy = correct_detections / user_total_objects if user_total_objects > 0 else 0
print('Accuracy:', accuracy)
# Calculate accuracy in percentage
accuracy_percentage = accuracy * 100
print('Accuracy:', accuracy_percentage, '%')

import os
from ultralytics import YOLO
from google.colab.patches import cv2_imshow

IMAGES_DIR = '/content/drive/MyDrive/wheat dataset new.v1i.yolov8 (1)/test/images'

image_path = '/content/drive/MyDrive/wheat dataset new.v1i.yolov8 (1)/test/images/IMG_20231206_123417_jpg.rf.385aa9422dda521c710579d6978d87aa.jpg'
output_image_path = '{}_out.jpg'.format(os.path.splitext(image_path)[0])

# Load a model
model_path = os.path.join('.', 'runs', 'detect', 'train', 'weights', 'last.pt')
model = YOLO(model_path)

image = cv2.imread(image_path)
H, W, _ = image.shape

# Run the model on the input image
results = model(image)[0]

threshold = 0.5

# User-provided total number of objects
user_total_objects = 250 # Replace with the actual total number of objects

# Count the number of correct detections
correct_detections = 0
total_detections = 0

for result in results.boxes.data.tolist():
    x1, y1, x2, y2, score, class_id = result
    if score > threshold:
        total_detections += 1
        predicted_label = results.names[int(class_id)].upper()

        # Uncomment the following line if you want to display bounding boxes for all detected objects
        # label = predicted_label[0]  # Get the first letter of the predicted label

        # Uncomment the following lines if you want to display bounding boxes only for 'WHEAT' objects
        label = ''  # Display 'W' for 'WHEAT'
        if predicted_label == 'WHEAT':
            correct_detections += 1

        cv2.rectangle(image, (int(x1), int(y1)), (int(x2), int(y2)), (0, 255, 0), 4)
        cv2.putText(image, label, (int(x1), int(y1 - 10)),
                    cv2.FONT_HERSHEY_SIMPLEX, 1.3, (0, 255, 0), 3, cv2.LINE_AA)

# Display or save the output image
cv2.imwrite(output_image_path, image)
cv2_imshow(image)  # Display the output image

# Print the total number of detections
print('Total Detections:', total_detections)

# Calculate accuracy based on user-provided total number of objects
accuracy = correct_detections / user_total_objects if user_total_objects > 0 else 0
print('Accuracy:', accuracy)
# Calculate accuracy in percentage
accuracy_percentage = accuracy * 100
print('Accuracy:', accuracy_percentage, '%')

